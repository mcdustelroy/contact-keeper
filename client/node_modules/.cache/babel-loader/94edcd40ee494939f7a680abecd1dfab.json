{"ast":null,"code":"var _jsxFileName = \"/Users/dustinmcelroy/Desktop/Programming/Projects/contact-keeper/client/src/components/routing/PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport AuthContext from '../../context/auth/authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = _ref => {\n  _s();\n\n  let {\n    redirect,\n    element\n  } = _ref;\n  const authContext = useContext(AuthContext);\n  const {\n    isAuthenticated,\n    loading\n  } = authContext; // return !isAuthenticated && !loading ? <Navigate to={redirect} /> : element;\n\n  return isAuthenticated && !loading ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: redirect\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 52\n  }, this);\n};\n\n_s(PrivateRoute, \"g0q6N3HTsGa67OokMUhTOzE2a0M=\");\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/dustinmcelroy/Desktop/Programming/Projects/contact-keeper/client/src/components/routing/PrivateRoute.js"],"names":["React","useContext","Navigate","AuthContext","PrivateRoute","redirect","element","authContext","isAuthenticated","loading"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;;;AAEA,MAAMC,YAAY,GAAG,QAA2B;AAAA;;AAAA,MAA1B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA0B;AAC5C,QAAMC,WAAW,GAAGN,UAAU,CAACE,WAAD,CAA9B;AACA,QAAM;AAAEK,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA+BF,WAArC,CAF4C,CAG5C;;AACA,SAAOC,eAAe,IAAI,CAACC,OAApB,GAA8BH,OAA9B,gBAAwC,QAAC,QAAD;AAAU,IAAA,EAAE,EAAED;AAAd;AAAA;AAAA;AAAA;AAAA,UAA/C;AACH,CALD;;GAAMD,Y;;KAAAA,Y;AAON,eAAeA,YAAf","sourcesContent":["import React, { useContext } from 'react';      \nimport { Navigate } from 'react-router-dom';\nimport AuthContext from '../../context/auth/authContext';\n\nconst PrivateRoute = ({ redirect, element }) => {\n    const authContext = useContext(AuthContext)\n    const { isAuthenticated, loading } = authContext;\n    // return !isAuthenticated && !loading ? <Navigate to={redirect} /> : element;\n    return isAuthenticated && !loading ? element : <Navigate to={redirect} />;\n};\n\nexport default PrivateRoute\n"]},"metadata":{},"sourceType":"module"}