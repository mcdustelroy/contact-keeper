{"ast":null,"code":"var _jsxFileName = \"/Users/Tania/Work/REACT/Dustin_git/contact-keeper/client/src/context/contact/ContactState.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport ContactReducer from \"./contactReducer\";\nimport { ADD_CONTACT, DELETE_CONTACT, CONTACT_ERROR, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, GET_CONTACTS, CLEAR_CONTACTS } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactState = props => {\n  _s();\n\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(ContactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get(\"/api/contacts\");\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; // Add Contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/contacts\", contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; // Delete Contact\n\n\n  const deleteContact = async id => {\n    try {\n      await axios.delete(`/api/contacts/${id}`);\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; // Update Contact\n\n\n  const updateContact = async contact => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/contacts/${contact._id}`, contact, config);\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; // Clear Contacts\n\n\n  const clearContacts = async () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Filter Contact\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      getContacts,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      clearContacts\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ContactState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContactState;\nexport default ContactState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactState\");","map":{"version":3,"sources":["/Users/Tania/Work/REACT/Dustin_git/contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","Fragment","useReducer","axios","ContactContext","ContactReducer","ADD_CONTACT","DELETE_CONTACT","CONTACT_ERROR","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","GET_CONTACTS","CLEAR_CONTACTS","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","msg","addContact","contact","config","headers","post","deleteContact","id","delete","updateContact","put","_id","clearContacts","setCurrent","clearCurrent","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { Fragment, useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport ContactReducer from \"./contactReducer\";\nimport {\n\tADD_CONTACT,\n\tDELETE_CONTACT,\n\tCONTACT_ERROR,\n\tSET_CURRENT,\n\tCLEAR_CURRENT,\n\tUPDATE_CONTACT,\n\tFILTER_CONTACTS,\n\tCLEAR_FILTER,\n\tGET_CONTACTS,\n\tCLEAR_CONTACTS,\n} from \"../types\";\n\nconst ContactState = (props) => {\n\tconst initialState = {\n\t\tcontacts: null,\n\t\tcurrent: null,\n\t\tfiltered: null,\n\t\terror: null,\n\t};\n\tconst [state, dispatch] = useReducer(ContactReducer, initialState);\n\n\t// Get Contacts\n\tconst getContacts = async () => {\n\t\ttry {\n\t\t\tconst res = await axios.get(\"/api/contacts\");\n\t\t\tdispatch({ type: GET_CONTACTS, payload: res.data });\n\t\t} catch (err) {\n\t\t\tdispatch({ type: CONTACT_ERROR, payload: err.res.msg });\n\t\t}\n\t};\n\n\t// Add Contact\n\tconst addContact = async (contact) => {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst res = await axios.post(\"/api/contacts\", contact, config);\n\n\t\t\tdispatch({ type: ADD_CONTACT, payload: res.data });\n\t\t} catch (err) {\n\t\t\tdispatch({ type: CONTACT_ERROR, payload: err.res.msg });\n\t\t}\n\t};\n\n\t// Delete Contact\n\tconst deleteContact = async (id) => {\n\t\ttry {\n\t\t\tawait axios.delete(`/api/contacts/${id}`);\n\n\t\t\tdispatch({ type: DELETE_CONTACT, payload: id });\n\t\t} catch (err) {\n\t\t\tdispatch({ type: CONTACT_ERROR, payload: err.res.msg });\n\t\t}\n\t};\n\n\t// Update Contact\n\tconst updateContact = async (contact) => {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst res = await axios.put(`/api/contacts/${contact._id}`, contact, config);\n\n\t\t\tdispatch({ type: UPDATE_CONTACT, payload: res.data });\n\t\t} catch (err) {\n\t\t\tdispatch({ type: CONTACT_ERROR, payload: err.res.msg });\n\t\t}\n\t};\n\n\t// Clear Contacts\n\tconst clearContacts = async () => {\n\t\tdispatch({ type: CLEAR_CONTACTS });\n\t};\n\n\t// Set Current Contact\n\tconst setCurrent = (contact) => {\n\t\tdispatch({ type: SET_CURRENT, payload: contact });\n\t};\n\n\t// Clear Current Contact\n\tconst clearCurrent = () => {\n\t\tdispatch({ type: CLEAR_CURRENT });\n\t};\n\n\t// Filter Contact\n\tconst filterContacts = (text) => {\n\t\tdispatch({ type: FILTER_CONTACTS, payload: text });\n\t};\n\n\t// Clear Filter\n\tconst clearFilter = () => {\n\t\tdispatch({ type: CLEAR_FILTER });\n\t};\n\n\treturn (\n\t\t<ContactContext.Provider\n\t\t\tvalue={{\n\t\t\t\tcontacts: state.contacts,\n\t\t\t\tcurrent: state.current,\n\t\t\t\tfiltered: state.filtered,\n\t\t\t\terror: state.error,\n\t\t\t\taddContact,\n\t\t\t\tgetContacts,\n\t\t\t\tdeleteContact,\n\t\t\t\tsetCurrent,\n\t\t\t\tclearCurrent,\n\t\t\t\tupdateContact,\n\t\t\t\tfilterContacts,\n\t\t\t\tclearFilter,\n\t\t\t\tclearContacts,\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</ContactContext.Provider>\n\t);\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}