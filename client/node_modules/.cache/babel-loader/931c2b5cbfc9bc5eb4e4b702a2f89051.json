{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(cont => cont.id !== action.payload)\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi'); // global, insensitive\n\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/dustinmcelroy/Desktop/Programming/Projects/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","state","action","type","contacts","payload","map","contact","id","filter","cont","current","filtered","regex","RegExp","name","match","email","CONTACT_ERROR","error"],"mappings":"AAAA,SACIA,WADJ,EAEIC,cAFJ,EAGIC,WAHJ,EAIIC,aAJJ,EAKIC,cALJ,EAMIC,eANJ,EAOIC,YAPJ,QAQO,UARP;AAUA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHG,QAAAA,QAAQ,EAAE,CACN,GAAGH,KAAK,CAACG,QADH,EAENF,MAAM,CAACG,OAFD;AAFP,OAAP;;AAOJ,SAAKP,cAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeE,GAAf,CAAmBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAP,CAAeG,EAA9B,GAAmCN,MAAM,CAACG,OAA1C,GAAoDE,OAAlF;AAFP,OAAP;;AAIJ,SAAKZ,cAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeK,MAAf,CAAsBC,IAAI,IAAIA,IAAI,CAACF,EAAL,KAAYN,MAAM,CAACG,OAAjD;AAFP,OAAP;;AAIJ,SAAKT,WAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHU,QAAAA,OAAO,EAAET,MAAM,CAACG;AAFb,OAAP;;AAIJ,SAAKR,aAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHU,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKZ,eAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHW,QAAAA,QAAQ,EAAEX,KAAK,CAACG,QAAN,CAAeK,MAAf,CAAsBF,OAAO,IAAI;AACvC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEZ,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd,CADuC,CACc;;AACrD,iBAAOE,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACH,SAHS;AAFP,OAAP;;AAOJ,SAAKb,YAAL;AACI,aAAO,EACH,GAAGC,KADA;AAEHW,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ,SAAKM,aAAL;AACI,aAAO,EACH,GAAGjB,KADA;AAEHkB,QAAAA,KAAK,EAAEjB,MAAM,CAACG;AAFX,OAAP;;AAIJ;AACI,aAAOJ,KAAP;AAhDR;AAkDH,CAnDD","sourcesContent":["import {\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER\n} from '../types';\n\nexport default (state, action) => {\n    switch (action.type) {\n        case ADD_CONTACT:\n            return {\n                ...state, \n                contacts: [\n                    ...state.contacts, \n                    action.payload\n                ]\n            }\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact )\n            }\n        case DELETE_CONTACT:\n            return {\n                ...state, \n                contacts: state.contacts.filter(cont => cont.id !== action.payload)\n            };\n        case SET_CURRENT:\n            return {\n                ...state, \n                current: action.payload\n            }\n        case CLEAR_CURRENT:\n            return {\n                ...state, \n                current: null\n            }\n        case FILTER_CONTACTS:\n            return {\n                ...state, \n                filtered: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi'); // global, insensitive\n                    return contact.name.match(regex) || contact.email.match(regex);\n                })\n            }\n        case CLEAR_FILTER:\n            return {\n                ...state, \n                filtered: null\n            }\n        case CONTACT_ERROR:\n            return {\n                ...state, \n                error: action.payload\n            }\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}