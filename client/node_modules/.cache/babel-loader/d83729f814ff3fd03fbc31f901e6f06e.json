{"ast":null,"code":"/* eslint-disable import/no-anonymous-default-export */\nimport { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, GET_CONTACTS, CLEAR_CONTACTS } from \"../types\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(cont => cont._id !== action.payload),\n        loading: false\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, \"gi\"); // global, insensitive\n\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/dustinmcelroy/Desktop/Programming/Projects/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","filtered","error","current","map","contact","_id","filter","cont","regex","RegExp","name","match","email"],"mappings":"AAAA;AACA,SACCA,WADD,EAECC,cAFD,EAGCC,WAHD,EAICC,aAJD,EAKCC,cALD,EAMCC,eAND,EAOCC,YAPD,EAQCC,aARD,EASCC,YATD,EAUCC,cAVD,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKJ,YAAL;AACC,aAAO,EACN,GAAGE,KADG;AAENG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFX;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKN,cAAL;AACC,aAAO,EACN,GAAGC,KADG;AAENG,QAAAA,QAAQ,EAAE,IAFJ;AAGNG,QAAAA,QAAQ,EAAE,IAHJ;AAINC,QAAAA,KAAK,EAAE,IAJD;AAKNC,QAAAA,OAAO,EAAE;AALH,OAAP;;AAOD,SAAKlB,WAAL;AACC,aAAO,EACN,GAAGU,KADG;AAENG,QAAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,QAA1B,CAFJ;AAGNE,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKX,cAAL;AACC,aAAO,EACN,GAAGM,KADG;AAENG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeM,GAAf,CAAoBC,OAAD,IAC5BA,OAAO,CAACC,GAAR,KAAgBV,MAAM,CAACG,OAAP,CAAeO,GAA/B,GAAqCV,MAAM,CAACG,OAA5C,GAAsDM,OAD7C,CAFJ;AAKNL,QAAAA,OAAO,EAAE;AALH,OAAP;;AAOD,SAAKd,cAAL;AACC,aAAO,EACN,GAAGS,KADG;AAENG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeS,MAAf,CAAuBC,IAAD,IAAUA,IAAI,CAACF,GAAL,KAAaV,MAAM,CAACG,OAApD,CAFJ;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKb,WAAL;AACC,aAAO,EACN,GAAGQ,KADG;AAENQ,QAAAA,OAAO,EAAEP,MAAM,CAACG;AAFV,OAAP;;AAID,SAAKX,aAAL;AACC,aAAO,EACN,GAAGO,KADG;AAENQ,QAAAA,OAAO,EAAE;AAFH,OAAP;;AAID,SAAKb,eAAL;AACC,aAAO,EACN,GAAGK,KADG;AAENM,QAAAA,QAAQ,EAAEN,KAAK,CAACG,QAAN,CAAeS,MAAf,CAAuBF,OAAD,IAAa;AAC5C,gBAAMI,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEd,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd,CAD4C,CACS;;AACrD,iBAAOM,OAAO,CAACM,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BJ,OAAO,CAACQ,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACA,SAHS;AAFJ,OAAP;;AAOD,SAAKlB,YAAL;AACC,aAAO,EACN,GAAGI,KADG;AAENM,QAAAA,QAAQ,EAAE;AAFJ,OAAP;;AAID,SAAKT,aAAL;AACC,aAAO,EACN,GAAGG,KADG;AAENO,QAAAA,KAAK,EAAEN,MAAM,CAACG;AAFR,OAAP;;AAID;AACC,aAAOJ,KAAP;AAhEF;AAkEA,CAnED","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport {\n\tADD_CONTACT,\n\tDELETE_CONTACT,\n\tSET_CURRENT,\n\tCLEAR_CURRENT,\n\tUPDATE_CONTACT,\n\tFILTER_CONTACTS,\n\tCLEAR_FILTER,\n\tCONTACT_ERROR,\n\tGET_CONTACTS,\n\tCLEAR_CONTACTS,\n} from \"../types\";\n\nexport default (state, action) => {\n\tswitch (action.type) {\n\t\tcase GET_CONTACTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: action.payload,\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase CLEAR_CONTACTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: null,\n\t\t\t\tfiltered: null,\n\t\t\t\terror: null,\n\t\t\t\tcurrent: null,\n\t\t\t};\n\t\tcase ADD_CONTACT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: [action.payload, ...state.contacts],\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase UPDATE_CONTACT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: state.contacts.map((contact) =>\n\t\t\t\t\tcontact._id === action.payload._id ? action.payload : contact\n\t\t\t\t),\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase DELETE_CONTACT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: state.contacts.filter((cont) => cont._id !== action.payload),\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase SET_CURRENT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrent: action.payload,\n\t\t\t};\n\t\tcase CLEAR_CURRENT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrent: null,\n\t\t\t};\n\t\tcase FILTER_CONTACTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfiltered: state.contacts.filter((contact) => {\n\t\t\t\t\tconst regex = new RegExp(`${action.payload}`, \"gi\"); // global, insensitive\n\t\t\t\t\treturn contact.name.match(regex) || contact.email.match(regex);\n\t\t\t\t}),\n\t\t\t};\n\t\tcase CLEAR_FILTER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfiltered: null,\n\t\t\t};\n\t\tcase CONTACT_ERROR:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terror: action.payload,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}