{"ast":null,"code":"import _toConsumableArray from\"/Users/dustinmcelroy/Desktop/Programming/Projects/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/dustinmcelroy/Desktop/Programming/Projects/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/* eslint-disable import/no-anonymous-default-export */import{ADD_CONTACT,DELETE_CONTACT,SET_CURRENT,CLEAR_CURRENT,UPDATE_CONTACT,FILTER_CONTACTS,CLEAR_FILTER,CONTACT_ERROR,GET_CONTACTS,CLEAR_CONTACTS}from\"../types\";export default(function(state,action){switch(action.type){case GET_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:action.payload,loading:false});case CLEAR_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:null,filtered:null,error:null,current:null});case ADD_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:[action.payload].concat(_toConsumableArray(state.contacts)),loading:false});case UPDATE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.map(function(contact){return contact._id===action.payload._id?action.payload:contact;}),loading:false});case DELETE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.filter(function(cont){return cont._id!==action.payload;}),loading:false});case SET_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:action.payload});case CLEAR_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:null});case FILTER_CONTACTS:return _objectSpread(_objectSpread({},state),{},{filtered:state.contacts.filter(function(contact){var regex=new RegExp(\"\".concat(action.payload),\"gi\");// global, insensitive\nreturn contact.name.match(regex)||contact.email.match(regex);})});case CLEAR_FILTER:return _objectSpread(_objectSpread({},state),{},{filtered:null});case CONTACT_ERROR:return _objectSpread(_objectSpread({},state),{},{error:action.payload});default:return state;}});","map":{"version":3,"sources":["/Users/dustinmcelroy/Desktop/Programming/Projects/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","filtered","error","current","map","contact","_id","filter","cont","regex","RegExp","name","match","email"],"mappings":"iUAAA,uDACA,OACCA,WADD,CAECC,cAFD,CAGCC,WAHD,CAICC,aAJD,CAKCC,cALD,CAMCC,eAND,CAOCC,YAPD,CAQCC,aARD,CASCC,YATD,CAUCC,cAVD,KAWO,UAXP,CAaA,eAAe,SAACC,KAAD,CAAQC,MAAR,CAAmB,CACjC,OAAQA,MAAM,CAACC,IAAf,EACC,IAAKJ,CAAAA,YAAL,CACC,sCACIE,KADJ,MAECG,QAAQ,CAAEF,MAAM,CAACG,OAFlB,CAGCC,OAAO,CAAE,KAHV,GAKD,IAAKN,CAAAA,cAAL,CACC,sCACIC,KADJ,MAECG,QAAQ,CAAE,IAFX,CAGCG,QAAQ,CAAE,IAHX,CAICC,KAAK,CAAE,IAJR,CAKCC,OAAO,CAAE,IALV,GAOD,IAAKlB,CAAAA,WAAL,CACC,sCACIU,KADJ,MAECG,QAAQ,EAAGF,MAAM,CAACG,OAAV,4BAAsBJ,KAAK,CAACG,QAA5B,EAFT,CAGCE,OAAO,CAAE,KAHV,GAKD,IAAKX,CAAAA,cAAL,CACC,sCACIM,KADJ,MAECG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeM,GAAf,CAAmB,SAACC,OAAD,QAC5BA,CAAAA,OAAO,CAACC,GAAR,GAAgBV,MAAM,CAACG,OAAP,CAAeO,GAA/B,CAAqCV,MAAM,CAACG,OAA5C,CAAsDM,OAD1B,EAAnB,CAFX,CAKCL,OAAO,CAAE,KALV,GAOD,IAAKd,CAAAA,cAAL,CACC,sCACIS,KADJ,MAECG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeS,MAAf,CAAsB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACF,GAAL,GAAaV,MAAM,CAACG,OAA9B,EAAtB,CAFX,CAGCC,OAAO,CAAE,KAHV,GAKD,IAAKb,CAAAA,WAAL,CACC,sCACIQ,KADJ,MAECQ,OAAO,CAAEP,MAAM,CAACG,OAFjB,GAID,IAAKX,CAAAA,aAAL,CACC,sCACIO,KADJ,MAECQ,OAAO,CAAE,IAFV,GAID,IAAKb,CAAAA,eAAL,CACC,sCACIK,KADJ,MAECM,QAAQ,CAAEN,KAAK,CAACG,QAAN,CAAeS,MAAf,CAAsB,SAACF,OAAD,CAAa,CAC5C,GAAMI,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,WAAcd,MAAM,CAACG,OAArB,EAAgC,IAAhC,CAAd,CAAqD;AACrD,MAAOM,CAAAA,OAAO,CAACM,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,GAA6BJ,OAAO,CAACQ,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC,CACA,CAHS,CAFX,GAOD,IAAKlB,CAAAA,YAAL,CACC,sCACII,KADJ,MAECM,QAAQ,CAAE,IAFX,GAID,IAAKT,CAAAA,aAAL,CACC,sCACIG,KADJ,MAECO,KAAK,CAAEN,MAAM,CAACG,OAFf,GAID,QACC,MAAOJ,CAAAA,KAAP,CAhEF,CAkEA,CAnED","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport {\n\tADD_CONTACT,\n\tDELETE_CONTACT,\n\tSET_CURRENT,\n\tCLEAR_CURRENT,\n\tUPDATE_CONTACT,\n\tFILTER_CONTACTS,\n\tCLEAR_FILTER,\n\tCONTACT_ERROR,\n\tGET_CONTACTS,\n\tCLEAR_CONTACTS,\n} from \"../types\";\n\nexport default (state, action) => {\n\tswitch (action.type) {\n\t\tcase GET_CONTACTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: action.payload,\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase CLEAR_CONTACTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: null,\n\t\t\t\tfiltered: null,\n\t\t\t\terror: null,\n\t\t\t\tcurrent: null,\n\t\t\t};\n\t\tcase ADD_CONTACT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: [action.payload, ...state.contacts],\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase UPDATE_CONTACT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: state.contacts.map((contact) =>\n\t\t\t\t\tcontact._id === action.payload._id ? action.payload : contact\n\t\t\t\t),\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase DELETE_CONTACT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcontacts: state.contacts.filter((cont) => cont._id !== action.payload),\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase SET_CURRENT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrent: action.payload,\n\t\t\t};\n\t\tcase CLEAR_CURRENT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrent: null,\n\t\t\t};\n\t\tcase FILTER_CONTACTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfiltered: state.contacts.filter((contact) => {\n\t\t\t\t\tconst regex = new RegExp(`${action.payload}`, \"gi\"); // global, insensitive\n\t\t\t\t\treturn contact.name.match(regex) || contact.email.match(regex);\n\t\t\t\t}),\n\t\t\t};\n\t\tcase CLEAR_FILTER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfiltered: null,\n\t\t\t};\n\t\tcase CONTACT_ERROR:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terror: action.payload,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}